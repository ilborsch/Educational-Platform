
–– Дизайн приложения, введение в веб. ––
1. Приложение со стороны пользователя.
2. Что такое веб сайт? Клиент-серверная архитектура.
3. Что такое Backend, Frontend и Fullstack.
4. Что такое HTTP, коммуникация между клиентом и сервером.
5. Из чего состоит HTTP запрос и ответ?
6. Методы HTTP – GET, POST.
7. HTTP статусы – 200, 404, 500.
8. Cookies, или просто печеньки.


–– Начинаем работу с HTTP в Go. ––
1. Пакет net/http.
2. Как отправлять запросы со стороны "Клиента".
3. Напишем свой сервер, что такое адресс и порт.
4. Handlers часть 1: что такое Writer и Request.
5. Handlers часть 2: динамические ссылки.
6. Handlers часть 3: читаем Query параметры.
7. Handlers часть 4: читаем request Body.
5. Cookies, временно сохраняем данные в клиентском браузере.
6. Middleware – удобная штука, напишем свой логгер и мини-авторизатор.
7. Разработаем TODO List!!!


–– Краткое вступление в HTML. Знакомство с Фронтендом и html/template ––
1. Что такое HTML? Кратское отступление фронтенд технологий.
2. База HTML часть 1.
3. База HTML часть 2.
4. База HTML часть 3.
5. Что такое CSS?
6. База CSS часть 1.
7. База CSS часть 2.
8. Знакомство с html/template.
9. Знакомство с синтаксисом HTML Templating.
10. Сделаем нашу страницу динамической!


–– Краткое вступление в Backend. Знакомство с REST API. ––
1. Что такое REST.
2. Что такое JSON, Body.
3. Другие HTTP методы – PUT, PATCH, DELETE.
4. Что такое CRUD?
5. Напишем свой бекенд CRUD!


–– Frontend + Backend = Fullstack! ––
1. Демо: напишем каталог курсов.
2. Напишем REST API Часть 1 – напишем CRUD.
3. Напишем REST API Часть 2 – напишем CRUD.
4. Напишем REST API Часть 3 – заменим наш slice на файл.
6. Свяжем нам фронтенд и backend.


–– Напишем первую версию нашего REST API ––
1. Демо: начнем разработку бекенда!
2. Познакомимся с SQLite.
3. Давайте рассмотрим архитектуру нашего приложения.
3. Дизайн базы данных, создадим таблицы.
4. Пишем репозиторий SQLite на Go: Часть 1 – Напишем домен и Courses.
5. Пишем репозиторий SQLite на Go: Часть 2 – Modules и Lessons.
6. Пишем репозиторий SQLite на Go: Часть 3 – Напишем HtmlDocuments.
7. Пишем репозиторий SQLite на Go: Часть 4 – CourseModules и ModuleLessons.
8. Напишем Usecase: Часть 1 – Напишем Usecase для Courses.
9. Напишем Usecase: Часть 2 – Напишем Usecase для Modules и Lessons.
10. Напишем Controllers (или Handlers): Часть 1 – Courses.
11. Напишем Controllers (или Handlers): Часть 2 – Modules и Lessons.
12. Напишем Logger Middleware.
13. Напишем Config и .env
14. Давайте протестим наше приложение вручную: Часть 1 – Знакомство с Postman.
14. Давайте протестим наше приложение вручную: Часть 2 – Используем Postman.


–– Напишем первую версию фронтенда ––
1. Демо: напишем фронт на Go!
2. Рассмотрим архитектуру приложения.
3. Начертим наши страницы.
4. Законекнимся к нашему бекенду.
5. Что такое CORS?
6. Вернемся к бекенду: Реализуем простую CORS валидацию.
6. Напишем HTMX документ для домашней страницы.
7. Напишем Handler для домашней страницы.
8. Напишем HTMX документ для страницы курса.
9. Напишем Handler для страницы курса.
10. Напишем базовый шаблон HTMX.
11. Напишем HTMX документ для страницы лекции.
12. Давайте протестим наше приложение!


–– Добавим новые фичи: REST API v2 ––
1. Демо: добавим комментарии и отзывы к нашему REST API!
2. Рассмотрим новый дизайн нашей базы данных.
3. Создаем новые таблицы и поля в нашей базе данных.
4. Добавляем новый Repository – Reviews.
5. Добавляем новый Repository – Comments и Images.
6. Напишем Usecase для Reviews.
7. Напишем Usecase для Comments и Images.
8. Пишем Handlers для Reviews – create, read_all, update, remove.
9. Пишем Handlers для Comments – create, read_all, update, remove.
10. Допишем Handlers для аватарок курса.
11. Давайте протестим наш REST API!


–– Добавим новые фичи: Frontend v2 ––
1. Демо: давайте обновим наш фронт!
2. Рассмотрим новую архитектуру HTMX документов.
3. Добавим новые endpoints нашего REST API.
4. Обновим Handler и HTMX главной страницы.
5. Обновим Handler и HTMX страницу курса.
6. Обновим Handler и HTMX страницу лекции.
7. Давайте отдохнем и потестим наше приложение!


–– Добавим поиск: REST API v3 --
1. Демо: Как наш поиск будет работать
2. Обсудим стратегию, обновим наши Handler и Usecase.
3. Обновим Repository.
4. Давайте протестим новую фичу!


–– Добавим поиск: Frontend v3 ––
1. Демо: как наш поиск будет выглядить визуально.
2. Обновим Handler и HTMX главного каталога курсов
3. Добавим новый Handler и HTMX для страницы поиска курсов.
4. Протестим результат!


–– Добавим пагинацию: REST API v4 --
1. Демо: Что такое пагинация? Улучшим эффективность нашей API.
2. Обсудим стратегию, обновим наши Handler и Usecase.
3. Обновим Repository.
4. Давайте протестим новую фичу!


–– Добавим пагинацию: Frontend v4 ––
1. Демо: как наша пагинация будет выглядить визуально.
2. Обновим Handler и HTMX страницы поиска курсов + протестим результат!


–– Добавим фильтры курсов: REST API v5 ––
1. Демо: фильтры и нафига они нам нужны?
2. Обсудим стратегию и добавим больше Query parameters в наш Handler!
3. Обновим наш Usecase и Repository...
4. Наш код получился говном. Давайте это исправим! Паттерн Functional Options.
5. Напишем модуль CourseFilters для Usecase.
6. Допишем Repository.
7. Давайте протестируем наши фильтры!
8. Оптимизируем модульность Часть 1: Обновляем поиск по имени.
8. Оптимизируем модульность Часть 2: Обновляем пагинацию.
10. Финальное тестирование! В очередной раз в Postman!


–– Добавим фильтры курсов: Frontend v5 ––
TODO


TODO – Сортировку курсов, Добавить юзеров (просто по сырым айдишникам), микросервис AuthX,
TODO – Привязать микросервис к бекенду, привязать бек аутентификацию к фронту. Splite, Docket, деплоймент и еще финальные штучки

