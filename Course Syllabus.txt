
–– Дизайн приложения, введение в веб. ––
1. Приложение со стороны пользователя
2. Что такое веб сайт? Клиент-серверная архитектура.
3. Что такое Backend, Frontend и Fullstack.
4. Что такое HTTP, коммуникация между клиентом и сервером.
5. Из чего состоит HTTP запрос и ответ?
6. Методы HTTP – GET, POST.
7. HTTP статусы – 200, 404, 500.
8. Cookies, или просто печеньки.


–– Начинаем работу с HTTP в Go. ––
1. Пакет net/http
2. Как отправлять запросы со стороны "Клиента"
3. Напишем свой сервер, что такое адресс и порт.
4. Handlers часть 1: что такое Writer и Request
5. Handlers часть 2: динамические ссылки.
6. Handlers часть 3: читаем Query параметры.
7. Handlers часть 4: читаем request Body.
5. Cookies, временно сохраняем данные в клиентском браузере
6. Middleware – удобная штука, напишем свой логгер и мини-авторизатор.
7. Разработаем TODO List!!!

–– Краткое вступление в HTML. Знакомство с Фронтендом и html/template ––
1. Что такое HTML? Кратское отступление фронтенд технологий.
2. База HTML часть 1.
3. База HTML часть 2.
4. База HTML часть 3.
5. Что такое CSS?
6. База CSS часть 1.
7. База CSS часть 2.
8. Знакомство с html/template
9. Знакомство с синтаксисом HTML Templating
10. Сделаем нашу страницу динамической!

–– Краткое вступление в Backend. Знакомство с REST API. ––
1. Что такое REST
2. Что такое JSON, Body.
3. Другие HTTP методы – PUT, PATCH, DELETE
4. Что такое CRUD?
5. Напишем свой бекенд CRUD!

–– Frontend + Backend = Fullstack! ––
1. Демо: напишем каталог курсов
2. Напишем REST API Часть 1 – напишем CRUD
3. Напишем REST API Часть 2 – напишем CRUD
4. Напишем REST API Часть 3 – заменим наш slice на файл
6. Свяжем нам фронтенд и backend

–– Напишем первую версию бекенд REST API ––
1. Демо: напишем первую версию REST API
2. Познакомимся с SQLite
3. Давайте рассмотрим архитектуру нашего приложения
3. Дизайн базы данных, создадим таблицы
4. Пишем репозиторий SQLite на Go: Часть 1 – Напишем домен и Courses
5. Пишем репозиторий SQLite на Go: Часть 2 – Modules и Lessons
6. Пишем репозиторий SQLite на Go: Часть 3 – Напишем HtmlDocuments
7. Пишем репозиторий SQLite на Go: Часть 4 – CourseModules и ModuleLessons
8. Напишем Usecase: Часть 1 – Напишем Usecase для Courses
9. Напишем Usecase: Часть 2 – Напишем Usecase для Modules и Lessons
10. Напишем Controllers (или Handlers): Часть 1 – Courses
11. Напишем Controllers (или Handlers): Часть 2 – Modules и Lessons
12. Напишем Logger Middleware
13. Напишем Config и .env
14. Давайте протестим наше приложение вручную: Часть 1 – Знакомство с Postman
14. Давайте протестим наше приложение вручную: Часть 2 – Используем Postman

–– Напишем первую версию фронтенда ––
1. Демо: напишем фронт на Go!
2. Рассмотрим архитектуру приложения
3. Начертим наши страницы
4. Законекнимся к нашему бекенду
5. Что такое CORS?
6. Вернемся к бекенду: Реализуем простую CORS валидацию
6. Напишем HTMX документ для домашней страницы
7. Напишем Handler для домашней страницы
8. Напишем HTMX документ для страницы курса
9. Напишем Handler для страницы курса
10. Напишем базовый шаблон HTMX
11. Напишем HTMX документ для страницы лекции
12. Давайте протестим наше приложение!






