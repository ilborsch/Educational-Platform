
–– Дизайн приложения, введение в веб. ––
1. Приложение со стороны пользователя
2. Что такое веб сайт? Клиент-серверная архитектура.
3. Что такое Backend, Frontend и Fullstack.
4. Что такое HTTP, коммуникация между клиентом и сервером.
5. Из чего состоит HTTP запрос и ответ?
6. Методы HTTP – GET, POST.
7. HTTP статусы – 200, 404, 500.
8. Cookies, или просто печеньки.


–– Начинаем работу с HTTP в Go. ––
1. Пакет net/http
2. Как отправлять запросы со стороны "Клиента"
3. Напишем свой сервер, что такое адресс и порт.
4. Handlers часть 1: что такое Writer и Request
5. Handlers часть 2: динамические ссылки.
6. Handlers часть 3: читаем Query параметры.
7. Handlers часть 4: читаем request Body.
5. Cookies, временно сохраняем данные в клиентском браузере
6. Middleware – удобная штука, напишем свой логгер и мини-авторизатор.
7. Разработаем TODO List!!!


–– Краткое вступление в HTML. Знакомство с Фронтендом и html/template ––
1. Что такое HTML? Кратское отступление фронтенд технологий.
2. База HTML часть 1.
3. База HTML часть 2.
4. База HTML часть 3.
5. Что такое CSS?
6. База CSS часть 1.
7. База CSS часть 2.
8. Знакомство с html/template
9. Знакомство с синтаксисом HTML Templating
10. Сделаем нашу страницу динамической!


–– Краткое вступление в Backend. Знакомство с REST API. ––
1. Что такое REST
2. Что такое JSON, Body.
3. Другие HTTP методы – PUT, PATCH, DELETE
4. Что такое CRUD?
5. Напишем свой бекенд CRUD!


–– Соединим фронтенд и backend чтобы получился Fullstack! ––
1. Демо: напишем каталог курсов
2. Напишем REST API Часть 1 – напишем CRUD
3. Напишем REST API Часть 2 – заменим наш slice на файл
4. Напишем фронтенд
5. Свяжем нам фронтенд и backend

–– Допишем первую версию бекенда ––
1. Демо: напишем первую версию REST API
2. Задизайним базу данных, создадим таблицы




